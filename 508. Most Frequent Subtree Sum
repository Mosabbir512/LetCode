/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int>ans;
    int dfs(TreeNode * root){
        if(!root)return 0;
       int s= dfs(root->left);
       s+=dfs(root->right);
       s+=root->val;
       ans.push_back(s);
       return s;
    }
    vector<int> findFrequentTreeSum(TreeNode* root) {
        dfs(root);
        map<int,int>mp;
        for(auto it:ans)mp[it]++;
        if(mp.size()!=ans.size()){
            int ct=0;
            for(auto it:mp){
               ct=max(ct,it.second);
            }
            vector<int>ans1;
            for(auto it:mp){
                if(it.second==ct)ans1.push_back(it.first);
            }
            return ans1;
        }
        return ans;
    }
};
