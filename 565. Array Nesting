class Solution {
public:
    int N=100005;
    vector<int>vis;
    vector<int>fre;
    Solution(){
        vis.resize(N,0);
        fre.resize(N,0);
    }
    int dfs(int ind,vector<int>& nums,int ct){
        cout<<nums[ind]<<" ";
        if(vis[ind]==1){
            return 0;
        }
        vis[ind]=1;
        int ans=dfs(nums[ind],nums,ct);
        return fre[ind]=ans+1;
        
    }
    int arrayNesting(vector<int>& nums) {
        int ans=0;
        int n=nums.size();
        for(int i=0;i<n;i++){
           if(vis[i]==0){
            dfs(i,nums,0);
           }
        }
        for(int i=0;i<n;i++)ans=max(ans,fre[i]);
        return ans;

    }
};
